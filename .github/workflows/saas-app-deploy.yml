name: ASDK Saas Sample App - Deploy to Azure Web Services

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AZURE_WEBAPP_NAME: "saas-app-ode-gorilla-zzxe"
  NODE_VERSION: 20.x
  NEXT_PUBLIC_API_BASE_URL: ${{ vars.DEV_NEXT_PUBLIC_API_BASE_URL }}
  AZURE_RESOURCE_GROUP: "rg-ode-gorilla-zzxe"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Azure login
      - uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Checkout the repo specifying the branch name in 'ref:'
      - uses: actions/checkout@v3
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      # Setup Node.js
      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Create .env file
      - name: Create .env file
        run: |
          touch .env
          echo NEXT_PUBLIC_API_BASE_URL=${{ env.NEXT_PUBLIC_API_BASE_URL }} >> .env
          echo NODE_ENV=development >> .env
        working-directory: ./src/Saas.Application

      # Install dependencies and build the project
      - name: npm install, build, and test
        run: |
          npm install
          npm run build
        working-directory: ./src/Saas.Application

      # Verify .next/standalone directory exists
      - name: Verify .next/standalone directory
        run: |
          if [ ! -d "./src/Saas.Application/.next/standalone" ]; then
            echo ".next/standalone directory does not exist"
            exit 1
          fi

      # Modify the server.js file
      - name: Modify server.js file
        run: |
          sed -i 's/const currentPort = parseInt(process.env.PORT, 10) || 3000/const currentPort = process.env.PORT || 3000/' ./src/Saas.Application/.next/standalone/server.js

      # Zip the .next/standalone directory and web.config file
      - name: Zip .next/standalone directory and web.config file
        run: |
          mkdir -p deploy
          cp -r .next/standalone/* deploy/
          cp -r .next/standalone/.next deploy/.next
          cp -r .next/static deploy/.next/static
          cp -r public deploy/public
          cp web.config deploy/
          cd deploy
          zip -r ../standalone.zip .
        working-directory: ./src/Saas.Application

      # Upload artifact for deployment job
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: ./src/Saas.Application/standalone.zip

      # Clean up existing files in wwwroot using Kudu API
      - name: Clean up wwwroot folder
        run: |
          curl -X POST -u ${{ secrets.AZURE_DEPLOYMENT_USERNAME }}:${{ secrets.AZURE_DEPLOYMENT_PASSWORD }} \
          https://${{ env.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net/api/command \
          -d '{ "command": "rm -rf /home/site/wwwroot" }'

      # Recreate wwwroot directory using Kudu API
      - name: Recreate wwwroot directory
        run: |
          curl -X POST -u ${{ secrets.AZURE_DEPLOYMENT_USERNAME }}:${{ secrets.AZURE_DEPLOYMENT_PASSWORD }} \
          https://${{ env.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net/api/command \
          -d '{ "command": "mkdir -p /home/site/wwwroot" }'

      # Download artifact from build job
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      # Extract zip archive to wwwroot using Kudu API
      - name: Extract zip archive to wwwroot
        run: |
          curl -X POST -u ${{ secrets.AZURE_DEPLOYMENT_USERNAME }}:${{ secrets.AZURE_DEPLOYMENT_PASSWORD }} \
          https://${{ env.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net/api/command \
          -d '{ "command": "unzip standalone.zip -d /home/site/wwwroot" }'

      # Verify extracted files using Kudu API
      - name: Verify extracted files
        run: |
          curl -X POST -u ${{ secrets.AZURE_DEPLOYMENT_USERNAME }}:${{ secrets.AZURE_DEPLOYMENT_PASSWORD }} \
          https://${{ env.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net/api/command \
          -d '{ "command": "ls -R /home/site/wwwroot" }'

      # Deploy to Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ./src/Saas.Application/standalone.zip
          slot-name: production

      # Azure logout
      - name: Logout
        run: |
          az logout
